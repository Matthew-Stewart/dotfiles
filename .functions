#!/usr/bin/env bash

# wrote this before learning about make files
c() {
  if [[ "${1##*.}" != "c" ]]; then
    return;
  fi
  filename=$(basename "$1" .c);
  gcc -ansi -Wall -pedantic "$1" -o "$filename";
  output=`gcc -ansi -Wall -pedantic "$1" -o "$filename" 2>&1`;
  if [[ $output != *"Error"* && $output != *"error"* ]]; then
    cmd="./$filename";
    if [ "$#" -ge 2 ]; then
      for i in ${@:2} ; do
        echo "$i";
        cmd="$cmd $i";
      done
    fi
    echo "executing $cmd" ; echo ""
    eval $cmd ; echo ""
  fi
}

# Colored cat with special characters printed
function dog() {
  gcat -t "$@" | pygmentize
}

# Alias for a command I use basically every day
function gr() {
  grep -Rni "$@" ./
}

# Moved ls to a function to get sorting working
function ls() {
  /bin/ls -AFChof "$@" | sort -k8 -f
}


# github.com/mathiasbynens/dotfiles/blob/master/.functions

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@";
  }
fi;

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
      | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
  if [ $# -eq 0 ]; then
    subl .;
  else
    subl "$@";
  fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
  if [ $# -eq 0 ]; then
    vim .;
  else
    vim "$@";
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


# github.com/xvoland/Extract/blob/master/extract.sh

function extract {
 if [ -z "$1" ]; then
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
          NAME="${n%.*}"
          mkdir "$NAME" && cd "$NAME"
          case "${n%,}" in
            *.tar.bz2|*.tbz2)  tar xvjf "../$n"    ;;
            *.tar.gz|*.tgz)    tar xvzf "../$n"    ;;
            *.tar.xz|*.txz)    tar xvJf "../$n"    ;;
            *.tar)     tar xvf "../$n"     ;;
            *.lzma)    unlzma "../$n"      ;;
            *.bz2)     bunzip2 "../$n"     ;;
            *.rar)     unrar x -ad "../$n" ;;
            *.gz)      gunzip "../$n"      ;;
            *.zip)     unzip "../$n"       ;;
            *.Z)       uncompress "../$n"  ;;
            *.7z)      7z x "../$n"        ;;
            *.xz)      unxz "../$n"        ;;
            *.exe)     cabextract "../$n"  ;;
            *)         echo "extract: '$n' - unknown archive method"; return 1 ;;
          esac
          cd ../
      else
          echo "$n - file does not exist"
          return 1
      fi
    done
fi
}
